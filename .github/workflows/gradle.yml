name: Java CI/CD with Gradle

on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - develop

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: "corretto"
          cache: gradle

      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make application-db.properties
        run: |
          cd ${{ github.workspace }}/src/main/resources
          echo "${{ secrets.DB_CONFIG }}" > ./application-db.properties

      - name: Make application-s3.properties
        run: |
          cd ${{ github.workspace }}/src/main/resources
          echo "${{ secrets.S3_CONFIG }}" > ./application-s3.properties

      - name: Make application-oauth.properties
        run: |
          cd ${{ github.workspace }}/src/main/resources
          echo "${{ secrets.OAUTH_CONFIG }}" > ./application-oauth.properties

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      - name: Docker build & push to docker repo
        run: |
          echo ${{ secrets.DOCKER_TOKEN }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker build -f ./Dockerfile -t ${{ secrets.DOCKER_REPO }}:latest .
          docker push ${{ secrets.DOCKER_REPO }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 작업 디렉토리로 이동
            cd ~/

            # .env 파일 업데이트 또는 생성
            echo "DOCKER_REPO=${{ secrets.DOCKER_REPO }}" > .env

            # .env 파일에서 환경 변수 로드
            export $(grep -v '^#' .env | xargs)

            # 기존 neomarket 컨테이너 중지 및 제거
            docker stop neomarket || true
            docker rm neomarket || true

            # 최신 이미지 pull
            docker pull "${DOCKER_REPO}:latest"
            
            # spring-app 컨테이너 실행
            docker run -d \
              --name neomarket \
              --network ubuntu_elk-network \
              -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=prod \
              "${DOCKER_REPO}:latest"

            # 사용하지 않는 이미지 정리
            docker image prune -af